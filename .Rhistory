demo()
is.things
demo(is.things)
install.packages("KernSmooth")
library(KernSmooth)
log(-1)
library(datasets)
data(iris)
?iris
iris
lapply(iris, mean($Sepal.length))
lapply(iris, mean())
?lapply
apply(iris, 1, mean)
apply(iris, 2, mean)
mean
apply(iris, 2, mean())
apply(iris, 2, mean)
iris
split(data, 3)
?subset
split(iris, 3)
split(iris, iris$Species)
rowMeans(iris$Sepal.Length)
rowMeans(iris$Sepal.Length, 2)
tapply(iris, iris$Species, mean)
?tapply
tapply(iris, iris$Species, mean)
tapply(iris$Species, iris$Sepal.Length, mean)
tapply(iris$Species[,$virginica], iris$Sepal.Length, mean)
class(iris)
iris
?tapply
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris, 2, mean)
apply(iris[,1:4], 1, mean)
apply(iris[,1:4], 2, mean)
library(datasets)
data(mtcars)
mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?sapply
split(mtcars$hp, mtcars$cyl)
sapply(split(mtcars$hp, mtcars$cyl))
sapply(split(mtcars$hp, mtcars$cyl), mean)
debut(ls)
debug(ls)
ls()
ls()
ls()
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
?dbConnect()
install.packages(RMySQL)
install.packages("RMySQL")
?dbConnect()
install.packages("dbConnect")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
?dbConnect()
install.packages("dbConnect")
?dbConnect()
install.packages("RMySQL")
?dbConnect()
dbConnect::DatabaseConnect()
dbConnect::DatabaseConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL)
install.packages("dbConnect")
install.packages("dbConnect")
source("http://bioconductor.org/biocLite.R")
biocLine("rhdf5")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
setwd("~/datasciencecoursera")
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr=5, nc=2)
h5write(A, "example.h5", "foo/A")
B = array(seq(0.1, 2.0, by=0.1), dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5", "foo/fooba/B")
h5write(B, "example.h5", "foo/foobaa/B")
h5ls(example.h5)
h5ls
h5ls("example.h5")
df = data.frame(1L:5L, seq(0,1, length.out=5))
df = data.frame(1:L, seq(0,1,length.out=5), c("ab", "cde", "fghi","a","s"), stringsAsFactors=FALSE)
df = data.frame(1L:5L, seq(0,1,length.out=5), c("ab", "cde", "fghi","a","s"), stringsAsFactors=FALSE)
df
h5write(df, "example.h5", "df")
h5ls("example.h5")
readA = h5read("example.h5", "foo/A")
readB = h5read("example.h5", "foo/foobaa/B")
readdf= h5read("example.h5", "df")
readA
readB
h5write(c(12,13,14), "example.h5", "foo/A", index=list(1:3,1))
h5read("example.h5", "foo/A")
con = url("https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes = T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr)
html2 = GET(url)
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
pg2 = GET("htttp://httpbin.org/basic-auth/user/passwd")
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg2 = GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user", "passwd"))
pg2
names(pg2)
library(httr)
myapp = oauth_app("twitter", key="XQebzStcgFJWxKuIsTZOhyPVN", secret="fAc4qzvTv0tMtfyRExdKCBQZEbSptu4N0DpZA4mcQjvHfB3Qh0")
sig = sign_oauth1.0(myapp, token = "14850313-Auuslxt4wgqZfEmWehL4bl4LQy65rsyw9pcYlwmtA", token_secret = "KfXV9W0N8e5r0EOPOutx8R4IGBhDS512T8nrvw50qTtAR")
homeTL = GET("https://api.twitter.com/1.1/statues/home_timeline.json")
homtTL
homeTL
?oauth_app
homeTL = GET("https://api.twitter.com/1.1/statues/home_timeline.json", sig)
homeTL
?content()
json1 = content(homeTL)
json2 = jsonline::fromJSON(toJSON(json1))
json2 = jsonlite::fromJSON(toJSON(json1))
?toJSON()
json2 = jsonlite::fromJSON(toJSON(json1))
install.packages("RJSONIO")
json2 = jsonlite::fromJSON(toJSON(json1))
library(RJSONIO)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
json2
myapp = oauth_app("twitter", key = "XQebzStcgFJWxKuIsTZOhyPVN", secret = "fAc4qzvTv0tMtfyRExdKCBQZEbSptu4N0DpZA4mcQjvHfB3Qh0")
sig = sign_oauth1.0(myapp, token = "14850313-Auuslxt4wgqZfEmWehL4bl4LQy65rsyw9pcYlwmtA", token_secret = "KfXV9W0N8e5r0EOPOutx8R4IGBhDS512T8nrvw50qTtAR")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
install.packages("base64enc")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
homeTL
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
json2[1,1:4]
json2[1,1:4]
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
> json1 = content(homeTL)
> json2 = jsonlite::fromJSON(toJSON(json1))
> json2[1,1:4]
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig);
json1 = content(homeTL);
json2 = jsonlite::fromJSON(toJSON(json1));
json2[1,1:4];
json2[3,1:5]
json2[1:3, 1:5]
