demo()
is.things
demo(is.things)
install.packages("KernSmooth")
library(KernSmooth)
log(-1)
library(datasets)
data(iris)
?iris
iris
lapply(iris, mean($Sepal.length))
lapply(iris, mean())
?lapply
apply(iris, 1, mean)
apply(iris, 2, mean)
mean
apply(iris, 2, mean())
apply(iris, 2, mean)
iris
split(data, 3)
?subset
split(iris, 3)
split(iris, iris$Species)
rowMeans(iris$Sepal.Length)
rowMeans(iris$Sepal.Length, 2)
tapply(iris, iris$Species, mean)
?tapply
tapply(iris, iris$Species, mean)
tapply(iris$Species, iris$Sepal.Length, mean)
tapply(iris$Species[,$virginica], iris$Sepal.Length, mean)
class(iris)
iris
?tapply
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris, 2, mean)
apply(iris[,1:4], 1, mean)
apply(iris[,1:4], 2, mean)
library(datasets)
data(mtcars)
mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?sapply
split(mtcars$hp, mtcars$cyl)
sapply(split(mtcars$hp, mtcars$cyl))
sapply(split(mtcars$hp, mtcars$cyl), mean)
debut(ls)
debug(ls)
ls()
ls()
ls()
?download.file()
getwd()
setwd(/Users/travishill/datascienecoursera)
ls
setwd(/Users/travishill/datasciencecoursera/gettingandcleaningdata)
setwd("/Users/travishill/datasciencecoursera/gettingandcleaningdata")
getwd()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "/Users/travishill/datasciencecoursera/gettingandcleaningdata")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "ACSQ1.csv")
ACSdata <- read.table("./ACSQ1.csv", sep = ",", header = TRUE)
head(ACSdata)
propertyValue <- ACSDATA[, $VAL]
propertyValue <- ACSdata[, ACSdata$VAL]
ACSdata$VAL
library(data.table)
library("data.table")
library(data.table())
update.packages()
install.packages("data.table")
library(data.table)
?as.data.table()
as.data.table(ACSdata)
class(ACSdata)
ACSdata[ACSdata$VAL==24,]
install.packages("xlsx")
install.packages("XML")
library(xlsx)
library(XML)
summary(ACSdata)
summary(ACSdata$VAL)
DT <- ACSdata$VAL
DT
DT <- data.table(ACSdata$VAL)
DT
class(DT)
DT[, .N, by=V1]
DT <- data.table(ACSdata)
class(DT)
DT[, .N, by=DT$VAL]
summary(DT$VAL)
DT[, .N, by=DT$VAL]
DT[, $VAL]
DT[, DT$VAL]
summary(DT$VAL)
head(DT$VAL)
summary(DT$FES)
head(DT$FES)
DT$FES
?download.file()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "NGAP.xlsx")
?read.table()
NGAPdata <- read.xlsx("NGAP.xlsx", header = FALSE)
NGAPdata <- read.xlsx("NGAP.xlsx", header = FALSE, sheetIndex = 1)
NGAPdata
?read.xls()
?read.xlsx()
read.xlsx(NGAP.xlsx, sheetIndex = 1, rowIndex = 18:23, colIndex = 7:15)
read.xlsx("NGAP.xlsx", sheetIndex = 1, rowIndex = 18:23, colIndex = 7:15)
dat <- read.xlsx("NGAP.xlsx", sheetIndex = 1, rowIndex = 18:23, colIndex = 7:15)
dat
sum(dat$Zip*dat$Ext,na.rm=T)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", "restaurants.xml")
library(XML)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
restaurantData <- xmlTreeParse(fileURL, useInternal=TRUE)
restaurantData <- xmlTreeParse(fileURL)
restaurantData <- xmlTreeParse(fileURL, useInternalNodes = TRUE)
fileURL <- https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
restaurantData <- xmlTreeParse(fileURL)
restaurantData <- xmlTreeParse("resaturants.xml")
?xmlTreeParse
fileURL <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
restaurantData <- xmlTreeParse(fileURL, useInternal=TRUE)
restaurantData
rootNode <- xmlRoot(restaurantData)
xmlName(rootNote)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
install.packages(Rcurl)
install.packages("Rcurl")
install.packages("RCurl")
library(RCurl)
url2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(url2)
data <- xmlTreeParse(xData,useInternalNodes = TRUE)
rootNode <- xmlRoot(data)
zips <- xpathSApply(rootNode,"//zipcode", xmlValue)
zips
zipsDT <- data.table(zips)
zipsDT
class(zipsDT)
zipsDT[, .N, by=zips]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "ACSQ4.csv")
?fread
DT <- fread(ACSQ4.csv)
DT <- fread("ACSQ4.csv")
DT
class(DT)
DT$pwgtp15
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time({rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
system.time({mean(DT$pwgtp15,by=DT$SEX)})
result <- mean(DT$pwgtp15,by=DT$SEX)
result
system.time({mean(DT$pwgtp15,by=DT$SEX)})
result2 <- DT[,mean(pwgtp15),by=SEX]
result2
system.time({DT[,mean(pwgtp15),by=SEX]})
system.time({mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
system.time({sapply(split(DT$pwgtp15,DT$SEX),mean)})
result3 <- sapply(split(DT$pwgtp15,DT$SEX),mean)
result3
result4 <- tapply(DT$pwgtp15,DT$SEX,mean)
result4
system.time({tapply(DT$pwgtp15,DT$SEX,mean)})
?system.time()
system.time({rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
