demo()
is.things
demo(is.things)
install.packages("KernSmooth")
library(KernSmooth)
log(-1)
library(datasets)
data(iris)
?iris
iris
lapply(iris, mean($Sepal.length))
lapply(iris, mean())
?lapply
apply(iris, 1, mean)
apply(iris, 2, mean)
mean
apply(iris, 2, mean())
apply(iris, 2, mean)
iris
split(data, 3)
?subset
split(iris, 3)
split(iris, iris$Species)
rowMeans(iris$Sepal.Length)
rowMeans(iris$Sepal.Length, 2)
tapply(iris, iris$Species, mean)
?tapply
tapply(iris, iris$Species, mean)
tapply(iris$Species, iris$Sepal.Length, mean)
tapply(iris$Species[,$virginica], iris$Sepal.Length, mean)
class(iris)
iris
?tapply
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris, 2, mean)
apply(iris[,1:4], 1, mean)
apply(iris[,1:4], 2, mean)
library(datasets)
data(mtcars)
mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?sapply
split(mtcars$hp, mtcars$cyl)
sapply(split(mtcars$hp, mtcars$cyl))
sapply(split(mtcars$hp, mtcars$cyl), mean)
debut(ls)
debug(ls)
ls()
ls()
ls()
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
?dbConnect()
install.packages(RMySQL)
install.packages("RMySQL")
?dbConnect()
install.packages("dbConnect")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
?dbConnect()
install.packages("dbConnect")
?dbConnect()
install.packages("RMySQL")
?dbConnect()
dbConnect::DatabaseConnect()
dbConnect::DatabaseConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL)
install.packages("dbConnect")
install.packages("dbConnect")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
set.seet(1234)
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = .2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = .2)
plot(x,y, col = "red", pch=19, cex=2)
text(x+.05, y+.05, labels = as.character(1:12))
dataFrame <- data.frame(x,y)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
kmeansObj$cluster
par(mar = rep(0.2,4))
plot(x,y, col = kmeansObj$cluster, pch=19, cex=2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
set.seex(1234)
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
dataMatrix
kmeansObj2 <- kmeans(dataMatrix, centers=3)
kmeansObj2
par(mfrow = c(1,2), mar = c(2,4,0.1,0.1))
image(t(dataMatrix)[nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[,nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
library(httr)
?httr()
?oauth_app()
?httr()
myapp = oauth_app("twitter", key="XQebzStcgFJWxKuIsTZOhyPVN", secret = "fAc4qzvTv0tMtfyRExdKCBQZEbSptu4N0DpZA4mcQjvHfB3Qh0")
sig = sign_oauth1.0(myapp, token = "14850313-Auuslxt4wgqZfEmWehL4bl4LQy65rsyw9pcYlwmtA", token_secret = "KfXV9W0N8e5r0EOPOutx8R4IGBhDS512T8nrvw50qTtAR")
connect <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(connect)
json2 = jsonlite::fromJSON(toJSON(json1))
toJSON()?
?
fsdfi
library(RJSONIO)
json2 = jsonlite::fromJSON(toJSON(json1))
json[1,1]
json2[1,1]
json2[1,1:4]
json2[2:6]
json2[2,1:6]
?oauth_app()
oauth_app("github", key = "05701dc65130cff4e3f8", secret = "79f9cd9080623b1997372d6741a0daf9a7f13648")
thisApp <- oauth_app("github", key = "05701dc65130cff4e3f8", secret = "79f9cd9080623b1997372d6741a0daf9a7f13648")
sig <- sign_oauth1.0(thisApp, token="5efae1f8f8fb291854c80c8f8f76fb0c96cf0add", token_secret = NULL)
sig
content = GET(url = "https://github.com/travisshawnhill?tab=activity", sig)
content
json1 = connect(content)
json1 = content(content)
json2 = jsonlite::fromJSON(toJSON(json1))
json2 = jsonlite::fromJSON(toJSON(json1))
json1
set.seed(12345)
par(mar = rep(0.2,4))
dataMatrix <- matrix(rnorm(400),nrow=40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
dataMatrix
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
set.seed(678910)
for(i in 1:40) {
coinFlip <- rbinom(1, size = 1, prob = 0.5)
}
for(i in 1:40) {
coinFlip <- rbinom(1, size = 1, prob = 0.5)
if(coinFlip){}
}
for(i in 1:40){
coinFlip <- rbinom(1, size = 1, prob = 0.5)
if(coinFlip){
dataMatrix[1, ] <- dataMatrix[1, ] + rep(c(0,3), each = 5)
}
}
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2,4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
?svd()
?svd$u()
set.seed(678910)
for(i in 1:40) {}
for(i in 1:40) {
coinFlip1 <- rbinom(1, size = 1, prob = 0.5)
coinFlip2 <- rbinom(1, size = 1, prob = 0.5)
if (coinFlip1) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0,5), each = 5)
}
if (coinFlip2) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0,5), 5)
}
}
dataMatrix <- matrix()
for(i in 1:40) {
coinFlip1 <- rbinom(1, size = 1, prob = 0.5)
coinFlip2 <- rbinom(1, size = 1, prob = 0.5)
if (coinFlip1) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0,5), each = 5)
}
if (coinFlip2) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0,5), 5)
}
}
?scale()
install.packages("impute")
source("https://bioconductor.org/biocLite.R")
biocLite("impute")
?gdDevices()
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
?grDevices()
library(help = "grDevices")
colors()
pal <- colorRamp(c("red","blue"))
pal
pal(0)
pal(1)
pal(2)
pal(0.5)
pal <- colorRamp(c("red", "green"))
pal(0)
pal(1)
pal(.5)
pal(seq(0,1,len=10))
pal <- colorRamp(c("red","blue"))
pal
pal(0)
pal(1)
pal(seq(0,1,len=10))
pal <- colorRampPallete(c("red","yellow"))
pal <- colorRampPalette(c("red","yellow"))
pal(2)
pal(10)
install.packages("RColorBrewer")
library(RColorBrewer)
cols <- brewer.pal(5, "Spectral")
cols
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
image
image(volcano, col = pal(40))
image(volcano, col = pal(60))
image(volcano, col = pal(6))
image(volcano, col = pal(100))
x<- rnorm(10000)
y<- rnorm(10000)
smoothScatter(x,y)
x<- rnorm(1000)
y<- rnorm(1000)
plot(x,y,pch=19)
plot(x,y,col = rgb(0,0,0,0.2), pch=19)
?download.file()
setwd("/Users/travishill/datasciencecoursera/gettingandcleaningdata")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "acs.csv")
acsData <- read.csv("acs.csv", header = TRUE)
head(acsData)
agricultureLogical <- acsData[(acsData$ACR == 3 & AGS == 6), ]
agricultureLogical <- acsData[(acsData$ACR == 3 & acsData$AGS == 6), ]
agricultureLogical
agricultureLogical <- as.logical(acsData[(acsData$ACR == 3 & acsData$AGS == 6), ])
?as.logical()
agricultureLogical <- logical(acsData[(acsData$ACR==3 & acsData$AGS==6),])
agricultureLogical <- as.logical(acsData[(acsData$ACR==3 & acsData$AGS==6),])
acricultureLogical <- which(acsData[(acsData$ACR == 3 & acsData$AGS == 6),])
?which()
agricultureLogical <- acsData[(acsData$ACR==3 & acsData$AGS==6),]
agricultureLogical
summary(agricultureLogical)
agricultureLogical <- as.logical(agricultureLogical)
class(acsData)
test <- acsData[(asData$ACR == 3),]
test <- acsData[(acsData$ACR == 3),]
test
?logical()
test2 <- as.logical(test1)
test2 <- as.logical(test)
class(test)
acsData$ACR == 3
acsData$ACR == 3 & acsData$AGS == 6
agricultureLogical <- (acsData$ACR == 3 & acsData$AGS == 6)
which(agricultureLogical)
?jpeg()
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg?accessType=DOWNLOAD";
download.file(fileUrl, destfile="jeff.jpg",method="curl")
?read.jpeg
?jpeg()
jpegData <- readJPEG("jeff.jpg", native=TRUE)
install.packages("jpeg")
jpegData <- readJPEG("jeff.jpg", native=TRUE)
read.jpeg("jeff.jpg", native = TRUE)
library(jpeg)
jpegData <- readJPEG("jeff.jpg", native=TRUE)
head(jpegData)
class(jpegData)
str(jpegData)
?quantile()
quantile(jpegData, probs = c(0.3, 0,8))
quantile(jpegData, probs = c(0.3, 0.8))
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl1, destfile = "GDPdata.csv")
download.file(fileUrl2, destfile = "Edudata.csv")
GDPdata <- read.csv("GDPdata.csv")
summary(GDPdata)
eduData <- read.csv("Edudata.csv")
summary(eduData)
?read.csv()
GDPdata <- read.csv("GDPdata.csv", skip = 5, nrows = 190)
GDPdata
GDPdata <- read.csv("GDPdata.csv", header = FALSE, skip = 5, nrows = 190)
GDPdata
eduData
nrow(eduData)
eduData
head(eduData)
?merge()
mergeData <- merge(eduData, GDPdata, by.x = eduData$CountryCode, by.y = GDPdata$V1)
mergeData <- merge(eduData, GDPdata, by.x = eduData$CountryCode, by.y = GDPdata$V1)
mergeData <- merge(eduData, GDPdata, by.x = 'CountryCode', by.y = 'V1')
mergeData
head(mergeData)
?order()
decreaseOrder <- mergeData[order(mergeData$V2, decreasing = TRUE)]
mergeData$V2
decreaseOrder <- mergeData[order(mergeData$V2, decreasing = TRUE),]
head(decreaseOrder)
tail(decreaseOrder)
decreaseOrder[15,]
decreaseOrder[13,]
nrows(mergeData)
nrow(mergeData)
head(mergeData)
mergeData$Income.Group
highIncome <- mergeData[(mergeData$Income.Group == "High income: OECD"),]
highIncome
?mean()
mean(highIncome$V2, na.rm = TRUE)
highIncomeNon <- mergeData[(mergeData$Income.Group == "High income: nonOECD"),]
mean(highIncomeNon$V2, na.rm = TRUE)
?cut()
library(Hmisc)
mergeData$Rank.Groups = cut2(matchedData$Rank, g = 5)
mergeData$Rank.Groups = cut2(mergeData$Rank, g = 5)
